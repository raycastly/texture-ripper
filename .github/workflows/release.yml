name: Release and Build

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches:
      - master

jobs:
  release-and-pages:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Setup Node
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. Install dependencies
      - run: npm ci

      # 4. Run Semantic Release
      - name: Run Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release || echo "No release created"

      # 5. Deploy GitHub Pages if release exists
      - name: Deploy GitHub Pages
        if: success()  # will run even if no release, optional
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./   # adjust if index.html is elsewhere

      # 6. Set output: latest release tag
      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

    outputs:
      latestTag: ${{ steps.get_tag.outputs.latest_tag }}

  windows-build:
    runs-on: windows-latest
    needs: release-and-pages
    steps:
      # 1. Checkout
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Setup Node
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. Install dependencies
      - run: npm ci

      # 4. Build Windows app only if a release tag exists
      - name: Build Windows App
        if: needs.release-and-pages.outputs.latestTag != ''
        run: npm run build:win

      # 5. Upload Windows Installer
      - name: Upload Windows Installer
        if: needs.release-and-pages.outputs.latestTag != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.release-and-pages.outputs.latestTag }}
          asset_path: dist/Texture\ Ripper\ Setup.exe
          asset_name: Texture-Ripper-Setup.exe
          asset_content_type: application/octet-stream

      # 6. Upload Windows ZIP
      - name: Upload Windows ZIP
        if: needs.release-and-pages.outputs.latestTag != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.release-and-pages.outputs.latestTag }}
          asset_path: dist/Texture-Ripper-win-unpacked.zip
          asset_name: Texture-Ripper.zip
          asset_content_type: application/zip
