name: Release and Build

permissions:
  contents: write    # needed to push tags and commits
  pages: write       # needed to deploy GitHub Pages
  id-token: write

on:
  push:
    branches:
      - master

jobs:
  release-and-pages:
    runs-on: ubuntu-latest
    outputs:
      nextReleaseVersion: ${{ steps.semantic-release.outputs.nextRelease.version }}
      releaseUploadUrl: ${{ steps.semantic-release.outputs.release_upload_url }}
    steps:
      # 1. Checkout
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Setup Node
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. Install dependencies
      - run: npm ci

      # 4. Run Semantic Release
      - name: Run Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v2
        with:
          branch: master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. Deploy to GitHub Pages (only if a release happened)
      - name: Deploy GitHub Pages
        if: steps.semantic-release.outputs.nextRelease.version != ''
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./   # adjust if your static site files are elsewhere

  windows-build:
    runs-on: windows-latest
    needs: release-and-pages
    steps:
      # 1. Checkout
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Setup Node
      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. Install dependencies
      - run: npm ci

      # 4. Build Windows app
      - name: Build Windows App
        run: npm run build:win   # make sure "build:win" script exists in package.json

      # 5. Upload Windows installer (only if a release happened)
      - name: Upload Windows Installer
        if: needs.release-and-pages.outputs.nextReleaseVersion != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release-and-pages.outputs.releaseUploadUrl }}
          asset_path: dist/Texture\ Ripper\ Setup.exe
          asset_name: Texture-Ripper-Setup.exe
          asset_content_type: application/octet-stream

      # 6. Upload ZIP
      - name: Upload Windows ZIP
        if: needs.release-and-pages.outputs.nextReleaseVersion != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release-and-pages.outputs.releaseUploadUrl }}
          asset_path: dist/Texture-Ripper-win-unpacked.zip
          asset_name: Texture-Ripper.zip
          asset_content_type: application/zip
